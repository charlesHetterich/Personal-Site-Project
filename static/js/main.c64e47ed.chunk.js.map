{"version":3,"sources":["Util/Interactables/ThemeController.tsx","Util/Components.tsx","Footer/footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeButton","Container","styled","div","Button","variant","IconButton","aria-label","Icon","className","color","Link","id","href","children","Footer","Wrapper","LinksContainer","Label","p","icon","faInstagram","link","faTwitter","faGithub","faEnvelope","LinkButton","StyledLink","size","App","LeftContainer","RightContainer","TitleContainer","Title","h1","SubTitle","DescText","InteractablesContainer","FooterContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAKO,IAAMA,EAAuC,WAClD,IAAMC,EAAYC,IAAOC,IAAV,KACf,OACE,kBAACF,EAAD,KACE,kBAACG,EAAA,EAAD,CAAQC,QAAQ,aAAhB,eACA,kBAACC,EAAA,EAAD,CAAYC,aAAW,UACrB,kBAACC,EAAA,EAAD,CAAMC,UAAU,oBAAoBC,MAAM,e,uLCHlD,IAaaC,EAAOT,aAbmD,SAAC,GAKjE,IAJLU,EAII,EAJJA,GACAH,EAGI,EAHJA,UACAI,EAEI,EAFJA,KACAC,EACI,EADJA,SAEA,OACE,uBAAGF,GAAIA,EAAIH,UAAWA,EAAWI,KAAMA,GACpCC,KAKaZ,CAAH,K,g2BCVV,IAAMa,EAAkC,WAC7C,IAAMC,EAAUd,IAAOC,IAAV,KAaPc,EAAiBf,IAAOC,IAAV,KAMde,EAAQhB,IAAOiB,EAAV,KAUX,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,EAAD,CACEG,KAAMC,IACNC,KAAK,+CAEP,kBAAC,EAAD,CAAYF,KAAMG,IAAWD,KAAK,qCAClC,kBAAC,EAAD,CACEF,KAAMI,IACNF,KAAK,wCAEP,kBAAC,EAAD,CACEF,KAAMK,IACNH,KAAK,wCAGT,kBAACJ,EAAD,gFAKAQ,EAGD,SAAC,GAAoB,IAAlBN,EAAiB,EAAjBA,KAAME,EAAW,EAAXA,KACNK,EAAazB,YAAOS,EAAPT,CAAH,KAShB,OACE,kBAACyB,EAAD,CAAYd,KAAMS,GAChB,kBAAC,IAAD,CAAiBF,KAAMA,EAAMQ,KAAM,S,6rEC+C1BC,MAvHf,WACE,IAAM5B,EAAYC,IAAOC,IAAV,KAST2B,EAAgB5B,IAAOC,IAAV,KAab4B,EAAiB7B,IAAOC,IAAV,KAgBd6B,EAAiB9B,IAAOC,IAAV,KAQd8B,EAAQ/B,IAAOgC,GAAV,KASLC,EAAWjC,IAAOiB,EAAV,KAYRiB,EAAWlC,IAAOiB,EAAV,KAaRkB,EAAyBnC,IAAOC,IAAV,KAQtBmC,EAAkBpC,IAAOC,IAAV,KASrB,OACE,kBAACF,EAAD,KACE,kBAAC6B,EAAD,KACE,kBAACE,EAAD,KACE,kBAACC,EAAD,gBACA,kBAACE,EAAD,oBAEF,kBAACC,EAAD,yCAEF,kBAACL,EAAD,KACE,kBAACM,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACC,EAAD,KACE,kBAAC,EAAD,SC3GYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c64e47ed.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { faArrowCircleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button, IconButton, Icon } from \"@material-ui/core\";\n\nexport const ThemeButton: React.FunctionComponent = () => {\n  const Container = styled.div``;\n  return (\n    <Container>\n      <Button variant=\"contained\">Hello World</Button>\n      <IconButton aria-label=\"delete\">\n        <Icon className=\"fa fa-plus-circle\" color=\"primary\" />\n      </IconButton>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype BaseProps = {\n  id?: string;\n  className?: string;\n};\n\nconst u_Link: React.FunctionComponent<BaseProps & { href?: string }> = ({\n  id,\n  className,\n  href,\n  children,\n}) => {\n  return (\n    <a id={id} className={className} href={href}>\n      {children}\n    </a>\n  );\n};\n\nexport const Link = styled(u_Link)`\n  -webkit-transition: color 1s; /* For Safari 3.0 to 6.0 */\n  transition: color 1s; /* For modern browsers */\n`;\n\nexport * from \"./Interactables/ThemeController\";\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition, faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faTwitter,\n  faGithub,\n  faInstagram,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nimport { Link } from \"../Util/Components\";\nexport const Footer: React.FunctionComponent = () => {\n  const Wrapper = styled.div`\n    display: flex;\n    padding: 50px;\n    padding-left: 8vw;\n    padding-right: 8vw;\n    @media (min-width: 801px) {\n      align-items: center;\n    }\n    @media (max-width: 800px) {\n      flex-direction: column-reverse;\n    }\n  `;\n\n  const LinksContainer = styled.div`\n    flex: 1;\n    display: flex;\n    justify-content: left;\n  `;\n\n  const Label = styled.p`\n    flex: 1;\n    font-size: 0.75em;\n    font-family: \"Roboto Slab\", serif;\n    color: #424245;\n    @media (max-width: 800px) {\n      margin-bottom: 30px;\n    }\n  `;\n\n  return (\n    <Wrapper>\n      <LinksContainer>\n        <LinkButton\n          icon={faInstagram}\n          link=\"https://www.instagram.com/charleshetterich\"\n        />\n        <LinkButton icon={faTwitter} link=\"https://twitter.com/Chazz_Edward\" />\n        <LinkButton\n          icon={faGithub}\n          link=\"https://github.com/charlesHetterich\"\n        />\n        <LinkButton\n          icon={faEnvelope}\n          link=\"mailto:hetterich.charles@gmail.com\"\n        />\n      </LinksContainer>\n      <Label>if there’s anything you’d like to talk about- get in touch!</Label>\n    </Wrapper>\n  );\n};\n\nconst LinkButton: React.FunctionComponent<{\n  icon: IconDefinition;\n  link: string;\n}> = ({ icon, link }) => {\n  const StyledLink = styled(Link)`\n    color: #535357;\n    padding: 5px;\n    margin-right: 10%;\n    &:hover {\n      color: black;\n    }\n  `;\n\n  return (\n    <StyledLink href={link}>\n      <FontAwesomeIcon icon={icon} size={\"lg\"}></FontAwesomeIcon>\n    </StyledLink>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Footer } from \"./Footer/footer\";\nimport { ThemeButton } from \"./Util/Components\";\n\nfunction App() {\n  const Container = styled.div`\n    display: flex;\n    width: 100%;\n    min-height: 100vh;\n    @media (max-width: 800px) {\n      flex-direction: column;\n    }\n  `;\n\n  const LeftContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    @media (max-width: 800px) {\n      flex: 0;\n      padding-bottom: 0;\n      align-items: flex-start;\n      justify-content: start;\n    }\n  `;\n\n  const RightContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    @media (min-width: 801px) {\n      padding-left: 0;\n    }\n    @media (max-width: 800px) {\n      padding: 50px;\n      padding-left: 8vw;\n      padding-top: 0px;\n      justify-content: start;\n    }\n  `;\n\n  const TitleContainer = styled.div`\n    padding-top: 50px;\n    padding-left: 8vw;\n    padding-right: 8vw;\n    flex-direction: column;\n    display: flex;\n  `;\n\n  const Title = styled.h1`\n    margin-left: -5px;\n    font-weight: 900;\n    font-size: 4em;\n    @media (max-width: 450px) {\n      font-size: 3em;\n    }\n  `;\n\n  const SubTitle = styled.p`\n    color: #535357;\n    margin-top: -15px;\n    font-size: 1.5em;\n    font-weight: 700;\n    font-style: italic;\n    margin-bottom: 100px;\n    @media (max-width: 450px) {\n      font-size: 1em;\n    }\n  `;\n\n  const DescText = styled.p`\n    padding-left: 8vw;\n    padding-right: 8vw;\n    color: #535357;\n    font-size: 1.5em;\n    font-weight: 500;\n    font-style: italic;\n    height: 100px;\n    @media (max-width: 450px) {\n      font-size: 1em;\n    }\n  `;\n\n  const InteractablesContainer = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    @media (min-width: 801px) {\n      margin-right: 50px;\n    }\n  `;\n\n  const FooterContainer = styled.div`\n    width: 100%;\n    @media (min-width: 801px) {\n      position: fixed;\n      bottom: 0;\n      left: 0;\n    }\n  `;\n\n  return (\n    <Container>\n      <LeftContainer>\n        <TitleContainer>\n          <Title>Charles</Title>\n          <SubTitle>'s website</SubTitle>\n        </TitleContainer>\n        <DescText>this is my ittie-bittie website</DescText>\n      </LeftContainer>\n      <RightContainer>\n        <InteractablesContainer>\n          <ThemeButton />\n        </InteractablesContainer>\n      </RightContainer>\n      <FooterContainer>\n        <Footer />\n      </FooterContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}